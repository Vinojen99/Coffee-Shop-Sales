-- SQL Project - Data Cleaning

-- Selects all records from the coffee_shop_sales table. 
SELECT * FROM coffee_shop_sales; 

-- Converts the transaction_date column from a text string to DATETIME format using the specified date format.
UPDATE coffee_shop_sales  
SET transaction_date = STR_TO_DATE(transaction_date, '%d/%m/%Y'); 

-- Modifies the transaction_date column to have the DATE data type in the table structure.
ALTER TABLE coffee_shop_sales
MODIFY COLUMN transaction_date DATE; 

-- Converts the transaction_time column from a string to TIME format.
UPDATE coffee_shop_sales  
SET transaction_time = TIME(transaction_time); 

-- Updates the table structure to set the transaction_time column as TIME data type.
ALTER TABLE coffee_shop_sales
MODIFY COLUMN transaction_time TIME; 

-- Verifies the structure of the coffee_shop_sales table to ensure the changes were applied.
DESCRIBE coffee_shop_sales;

-- Renames the ï»¿transaction_id column to transaction_id and sets its data type to INT, removing unwanted characters.
ALTER TABLE coffee_shop_sales
CHANGE COLUMN ï»¿transaction_id transaction_id INT; 


## Total Sales Analysis
-- Calculates the total sales for the month of March by summing up the product of unit_price and transaction_qty.
SELECT SUM(unit_price * transaction_qty) AS Total_Sales
FROM coffee_shop_sales 
WHERE 
MONTH(transaction_date) = 3; 

-- Calculates total sales for April and May, along with the month-over-month percentage increase.
SELECT 
	MONTH(transaction_date) AS month, -- Extracts the month from the transaction_date column and aliases it as 'month'.
    ROUND(SUM(unit_price * transaction_qty)) AS total_sales, -- Rounds the total sales for each month.
    (SUM(unit_price * transaction_qty) - LAG(SUM(unit_price * transaction_qty), 1) -- Computes the difference in total sales compared to the previous month.
    OVER (ORDER BY MONTH(transaction_date))) / LAG(SUM(unit_price * transaction_qty), 1) -- Divides the difference by the previous month's sales.
    OVER (ORDER BY MONTH(transaction_date)) * 100 AS mom_increase_percentage -- Multiplies by 100 to calculate the percentage increase.
FROM
	coffee_shop_sales
WHERE 
	MONTH(transaction_date) IN (4,5) -- Filters the data for April and May only.
GROUP BY 
	MONTH(transaction_date) -- Groups the results by month to calculate aggregated values.
ORDER BY 
	MONTH(transaction_date); -- Orders the results by month in ascending order.


## Total Orders Analysis
-- Counts the total number of orders (transactions) in the month of May.
SELECT COUNT(transaction_id) AS Total_orders
FROM coffee_shop_sales
WHERE 
MONTH (transaction_date) = 5; 

## TOTAL ORDERS KPI - MOM DIFFERENCE AND MOM GROWTH
-- Calculates the total orders for April and May along with the month-over-month (MoM) difference and growth percentage.
SELECT 
    MONTH(transaction_date) AS month, -- Extracts the month from the transaction_date column and aliases it as 'month'. 
    ROUND(COUNT(transaction_id)) AS total_orders, -- Counts the total number of orders for each month and rounds the result.
    (COUNT(transaction_id) - LAG(COUNT(transaction_id), 1) -- Calculates the difference in total orders compared to the previous month.
    OVER (ORDER BY MONTH(transaction_date))) / LAG(COUNT(transaction_id), 1) -- Divides the difference by the previous month's total orders.
    OVER (ORDER BY MONTH(transaction_date)) * 100 AS mom_increase_percentage -- Multiplies by 100 to get the percentage growth.
FROM 
    coffee_shop_sales
WHERE 
    MONTH(transaction_date) IN (4, 5) -- Filters the data to include transactions only from April and May.
GROUP BY 
    MONTH(transaction_date) -- Groups the results by month to calculate aggregated values for each month.
ORDER BY 
    MONTH(transaction_date); -- Orders the results by month in ascending order.

## Total Quantity Sold 

-- Calculates the total quantity of items sold in the month of May.
SELECT SUM(transaction_qty) AS Total_qantity_sold
FROM coffee_shop_sales
WHERE 
MONTH (transaction_date) = 5;

## 

-- Calculates the total quantity sold for April and May along with the month-over-month (MoM) difference and growth percentage.
SELECT 
    MONTH(transaction_date) AS month, -- Extracts the month from the transaction_date column and aliases it as 'month'.
    ROUND(SUM(transaction_qty)) AS total_qty_sold, -- Sums up the total quantity sold for each month and rounds the result.
    (SUM(transaction_qty) - LAG(SUM(transaction_qty), 1) -- Calculates the difference in total quantity sold compared to the previous month.
    OVER (ORDER BY MONTH(transaction_date))) / LAG(SUM(transaction_qty), 1) -- Divides the difference by the previous month's total quantity sold.
    OVER (ORDER BY MONTH(transaction_date)) * 100 AS mom_increase_percentage -- Multiplies by 100 to calculate the percentage growth.
FROM 
    coffee_shop_sales
WHERE 
    MONTH(transaction_date) IN (4, 5) -- for April and May
GROUP BY 
    MONTH(transaction_date)
ORDER BY 
    MONTH(transaction_date);


## CALENDAR TABLE – DAILY SALES, QUANTITY and TOTAL ORDERS
-- Calculates daily sales, total quantity sold, and total orders for a specific date (2023-05-18).
SELECT
	CONCAT(ROUND(SUM(unit_price * transaction_qty)/1000,1), 'k') AS Total_sales, -- Calculates total sales, divides by 1000 for scaling, rounds to one decimal, and appends 'k'.
    CONCAT(ROUND(SUM(transaction_qty)/1000,1), 'k') AS Total_Qty_Sold, -- Calculates total quantity sold, scales, rounds, and appends 'k'.
    CONCAT(ROUND(COUNT(transaction_id)/1000,1), 'k') AS Total_orders -- Counts total orders, scales, rounds, and appends 'k'.
FROM coffee_shop_sales
WHERE 
	transaction_date = '2023-05-18'; -- Filters the data to include only transactions from the specified date (May 18, 2023).

## SALES TREND OVER PERIOD WEEKEND/WEEKDAY
-- Analyzes sales trends by categorizing transactions into weekends (Saturday and Sunday) and weekdays (Monday to Friday).
-- Weekends - Sat and sun
-- Weekdays - Mon to Fri 
-- Sun = 1 Mon = 2 ... Sat = 7

SELECT 
	CASE WHEN dayofweek(transaction_date) IN (1,7) THEN 'Weekends' -- Assigns 'Weekends' for Sundays (1) and Saturdays (7).
    ELSE 'Weekdays'-- Weekend case statement -- Assigns 'Weekdays' for all other days (Monday to Friday).
	END AS day_type, 
    CONCAT(ROUND(SUM(unit_price * transaction_qty)/1000,1),'k') AS total_sales  -- Calculates total sales for each category, scales the value, rounds to one decimal, and appends 'k'.
FROM coffee_shop_sales
WHERE MONTH(transaction_date) = 5 -- May Month -- Filters the data to include only transactions from May.
GROUP BY 
	CASE WHEN dayofweek(transaction_date) IN (1,7) THEN 'Weekends' -- Groups data by day type (Weekends or Weekdays).
    ELSE 'Weekdays'-- Weekend case statement
	END ;
    
## Sales by Store Location
-- Analyzes total sales for each store location in May, sorted by sales in descending order.
SELECT 
	store_location,  -- Retrieves the location of the store
    CONCAT(ROUND(SUM(unit_price * transaction_qty)/1000,2),'k') AS total_sales  -- Calculates total sales for each store location, scales, rounds to two decimals, and appends 'k'.
FROM coffee_shop_sales
WHERE MONTH(transaction_date) = 5 -- Filters the data to include only transactions from May.
GROUP BY store_location
ORDER BY total_sales DESC; -- Orders the results by total sales in descending order.

   
## Sales Analysis average for a particular month
-- Calculates the average daily sales for the month of May.
SELECT 
	CONCAT(ROUND(AVG(total_sales)/1000, 1),'k') AS avg_sales -- Calculates the average daily sales, scales, rounds to one decimal, and appends 'k'.
FROM 
	(
    SELECT SUM(transaction_qty * unit_price) AS total_sales  -- Calculates total sales for each day in May.
    FROM coffee_shop_sales
    WHERE MONTH (transaction_date) = 5 -- Filters the data to include only transactions from May.
    GROUP BY transaction_date -- Groups the results by each transaction date to calculate daily sales.
    ) AS Inner_query -- Subquery to calculate daily sales, used to compute the average.
    ;
    
## Daily sales for a particular month
-- Calculates the total daily sales for each day in May and orders the results by day. 
SELECT 
	DAY(transaction_date) AS day_of_month, 
    CONCAT(ROUND(SUM(unit_price * transaction_qty)/1000,2),'k') AS total_sales -- Calculates total sales for each day, scales, rounds to two decimals, and appends 'k'.
FROM coffee_shop_sales
WHERE MONTH (transaction_date) = 5
GROUP BY DAY(transaction_date)
ORDER BY day(transaction_date)
;    

## Above Average or below average Query
-- Compares daily sales to the average sales for May and classifies each day as Above Average, Below Average, or Average.
SELECT 
	day_of_month,
    CASE 
		WHEN total_sales > avg_sales THEN 'Above Average' -- Assigns 'Above Average' if daily sales exceed the average sales.
        WHEN total_sales < avg_sales THEN 'Below Average' -- Assigns 'Below Average' if daily sales are below the average sales.
        ELSE 'Average' -- Assigns 'Average' if daily sales match the average sales.
	END AS sales_status, -- Assigns a status (Above Average, Below Average, or Average) based on the sales comparison.
    total_sales
FROM (
    SELECT 
        DAY(transaction_date) AS day_of_month,
        SUM(unit_price * transaction_qty) AS total_sales,
        AVG(SUM(unit_price * transaction_qty)) OVER () AS avg_sales
    FROM 
        coffee_shop_sales
    WHERE 
        MONTH(transaction_date) = 5  -- Filter for May
    GROUP BY 
        DAY(transaction_date)
) AS sales_data
ORDER BY 
    day_of_month;
    
## Sales by product Category
-- Calculates total sales for each product category in May and orders the results by sales in descending order.
SELECT
	product_category,
    CONCAT(ROUND(SUM(unit_price * transaction_qty)/1000,1), 'k') AS total_sales
FROM coffee_shop_sales
WHERE 
	MONTH(transaction_date) = 5  -- Filter for May
    GROUP BY product_category
    ORDER BY SUM(unit_price * transaction_qty) DESC; -- Orders the results by total sales in descending order.

 
## Top 10 Products 
-- Retrieves the top 10 products with the highest sales in May, ordered by total sales in descending order.
SELECT
	product_type,
    CONCAT(ROUND(SUM(unit_price * transaction_qty)/1000,1), 'k') AS total_sales
FROM coffee_shop_sales
WHERE 
	MONTH(transaction_date) = 5  -- Filter for May
    GROUP BY product_type
    ORDER BY SUM(unit_price * transaction_qty) DESC
    LIMIT 10;
   
## Sales by days and hours 
-- Analyzes sales on Tuesdays at 8 AM in May, providing total sales, quantity sold, and the number of orders.
SELECT 
    ROUND(SUM(unit_price * transaction_qty)) AS total_sales,
    SUM(transaction_qty) AS Total_qty_sold,
    COUNT(*) AS Total_orders  -- Counts the total number of orders.
FROM 
	coffee_shop_sales
WHERE 
	DAYOFWEEK(transaction_date) = 3 -- Filter for Tuesday
	AND HOUR(transaction_time) = 8 -- Filter for hour number 8AM
	AND MONTH(transaction_date) = 5 -- Filter for month May
; 

## Sales From Monday to sunday for the month of may
-- Calculates total sales for each day of the week (Monday to Sunday) during May.
SELECT 
    CASE 
        WHEN DAYOFWEEK(transaction_date) = 2 THEN 'Monday' -- Assigns 'Monday' for transactions occurring on day 2 of the week.
        WHEN DAYOFWEEK(transaction_date) = 3 THEN 'Tuesday'
        WHEN DAYOFWEEK(transaction_date) = 4 THEN 'Wednesday'
        WHEN DAYOFWEEK(transaction_date) = 5 THEN 'Thursday'
        WHEN DAYOFWEEK(transaction_date) = 6 THEN 'Friday'
        WHEN DAYOFWEEK(transaction_date) = 7 THEN 'Saturday'
        ELSE 'Sunday'
    END AS Day_of_Week, -- Outputs the day of the week as a string.
    ROUND(SUM(unit_price * transaction_qty)) AS Total_Sales -- Calculates total sales for each day of the week and rounds the result.
FROM 
    coffee_shop_sales
WHERE 
    MONTH(transaction_date) = 5 -- Filter for May (month number 5)
GROUP BY 
    CASE 
        WHEN DAYOFWEEK(transaction_date) = 2 THEN 'Monday'
        WHEN DAYOFWEEK(transaction_date) = 3 THEN 'Tuesday'
        WHEN DAYOFWEEK(transaction_date) = 4 THEN 'Wednesday'
        WHEN DAYOFWEEK(transaction_date) = 5 THEN 'Thursday'
        WHEN DAYOFWEEK(transaction_date) = 6 THEN 'Friday'
        WHEN DAYOFWEEK(transaction_date) = 7 THEN 'Saturday'
        ELSE 'Sunday'
    END;

## Sales for the month of May 
-- Calculates total sales for each hour of the day in May.
SELECT 
    HOUR(transaction_time) AS Hour_of_Day, -- Extracts the hour from the transaction_time column and aliases it as 'Hour_of_Day'.
    ROUND(SUM(unit_price * transaction_qty)) AS Total_Sales -- Calculates total sales for each hour and rounds the result.
FROM 
    coffee_shop_sales
WHERE 
    MONTH(transaction_date) = 5 -- Filter for May (month number 5)
GROUP BY 
    HOUR(transaction_time)
ORDER BY 
    HOUR(transaction_time);

